{"version":3,"sources":["components/Square.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Square","props","className","onClick","value","Board","status","useState","Array","fill","boardSquares","setBoardSquares","xIsNext","setXIsNext","renderSquare","index","squares","calculateWinner","handleClick","winner","document","location","reload","winningLines","i","length","a","b","c","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOAEe,SAASA,EAAOC,GAC7B,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,QCFE,SAASC,IAAS,IAgC3BC,EAhC0B,EACUC,mBAASC,MAAM,GAAGC,KAAK,OADjC,mBACvBC,EADuB,KACTC,EADS,OAGAJ,oBAAS,GAHT,mBAGvBK,EAHuB,KAGdC,EAHc,KAsBxBC,EAAe,SAACC,GACpB,OAAO,cAACf,EAAD,CAAQI,MAAOM,EAAaK,GAAQZ,QAAS,kBAlBlC,SAACY,GAEnB,IAAMC,EAAO,YAAON,GAEhBO,EAAgBP,IAAiBM,EAAQD,KAG7CC,EAAQD,GAASH,EAAU,IAAM,IAGjCD,EAAgBK,GAGhBH,GAAYD,IAK8CM,CAAYH,OAUxE,IAAMI,EAASF,EAAgBP,GAG/B,OAFAJ,EAASa,EAAM,qBAAiBA,GAAjB,uBAA4CP,EAAU,IAAM,KAGzE,gCACE,qBAAKV,UAAU,SAAf,SAAyBI,IACzB,sBAAKJ,UAAU,YAAf,UAA4BY,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,sBAAKZ,UAAU,YAAf,UAA4BY,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,sBAAKZ,UAAU,YAAf,UAA4BY,EAAa,GAAIA,EAAa,GAAIA,EAAa,MAC3E,qBAAKZ,UAAU,gBAAf,SACE,wBAAQA,UAAU,kCAAkCC,QAhB1D,WACEiB,SAASC,SAASC,UAed,SACI,kDAOZ,SAASL,EAAgBD,GAcvB,IAZA,IAAMO,EAAe,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIAC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAAC,IAAD,cAC1BD,EAAaC,GADa,GACrCE,EADqC,KAClCC,EADkC,KAC/BC,EAD+B,KAG5C,GAAIZ,EAAQU,IAAMV,EAAQU,KAAOV,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,GACpE,OAAOZ,EAAQU,GAInB,OAAO,KC5DMG,MAZf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKA,UAAU,YAAf,SACE,cAACG,EAAD,WCGKyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BZ,M","file":"static/js/main.901102f0.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n","import React, { useState } from 'react'\nimport Square from './Square'\n\nexport default function Board() {\n  const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const handleClick = (index) => {\n    // copy state\n    const squares = [...boardSquares];\n\n    if (calculateWinner(boardSquares) || squares[index]) return;\n\n    // Set X or O\n    squares[index] = xIsNext ? \"X\" : \"O\"\n\n    // state of the board\n    setBoardSquares(squares);\n\n    // state of the turn\n    setXIsNext(!xIsNext);\n    \n  }\n\n  const renderSquare = (index) => {\n    return <Square value={boardSquares[index]} onClick={() => handleClick(index)} />\n  }\n\n  // lazy reset function\n  function reset() {\n    document.location.reload()\n  }\n\n  // init status\n  let status;\n  const winner = calculateWinner(boardSquares);\n  status = winner ? `Winner is: ${winner}` : `Next player: ${xIsNext ? \"X\" : \"O\"}`\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">{renderSquare(0)}{renderSquare(1)}{renderSquare(2)}</div>\n      <div className=\"board-row\">{renderSquare(3)}{renderSquare(4)}{renderSquare(5)}</div>\n      <div className=\"board-row\">{renderSquare(6)}{renderSquare(7)}{renderSquare(8)}</div>\n      <div className=\"reset-wrapper\">\n        <button className=\"reset btn btn-outline-secondary\" onClick={reset}>\n            <strong>Reset</strong>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nfunction calculateWinner(squares) {\n  // possible winnning combinations\n  const winningLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  // check if squares is in winning combinations\n  for (let i = 0; i < winningLines.length; i++) {\n    const [a, b, c] = winningLines[i];\n    \n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n      return squares[a];\n    }\n\n  }\n  return null;\n}\n","import './App.css';\nimport Board from './components/Board'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\">\n          <Board />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}